#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Wed Jun 25 01:53:12 PDT 2014
# Last Modified: Wed Jun 25 01:53:12 PDT 2014
# Filename:      ...source/humextra/bin/makerst
# Syntax:        perl 5
#
# Description:   re-restrctured text to restructured text converter.
#


use strict;

my $oldhumdir = "../../../Humdrum";

die "Usage $0 input output (@ARGV)" if @ARGV != 2;

my $inputfile  = $ARGV[0];
my $outputfile = $ARGV[1];

open (INFILE, $inputfile) or die "Cannot read inputfile: $inputfile";
my @contents = <INFILE>;
close INFILE;

@contents = processContents(@contents);

open (OUTFILE, ">$outputfile") or die "Cannot write outputfile: $outputfile";
print OUTFILE ".. ####### AUTOMATICALLY GENERATED TEXT, DO NOT EDIT ######\n";
print OUTFILE @contents;
close OUTFILE;

exit(0);


###########################################################################


##############################
##
## processContents --
##
## * Add hyperlinks to Humdrum Extras program man pages:
## Change :hxcom:`command`
## To:    `command <http://extras.humdrum.org/man/command>`_
##
## * Add hyperlinks to Humdrum Toolkit program man pages:
## Change :htcom:`command`
## To:    `command <http://www.humdrum.org/Humdrum/commands/command.html>`_
##
## * Tagging system for exclusive interpretations:
## Change :exinterp:`kern`
## To:    \*\*kern
##
##

sub processContents {
   my @contents = @_;

   my $i;
   my $pre;
   my $post;
   my $match;
   for ($i=0; $i<@contents; $i++) {

      if ($contents[$i] =~ /^\.\.\s+humdrumio\s*:\s*:/) {
         @contents = processHumdrumio($i, @contents);
      }

      while ($contents[$i] =~ /:html:hxcom:`\s*([^`\s]+)\s*`/) {
         $match = $1;
         $pre = $`;
         $post = $';
         $contents[$i]  = $pre;
         $contents[$i] .= "<a href=http://extras.humdrum.org/man/$match>$match</a>";
         $contents[$i] .= $post;
      }

      while ($contents[$i] =~ /:hxcom:`\s*([^`\s]+)\s*`/) {
         $match = $1;
         $pre = $`;
         $post = $';
         $contents[$i]  = $pre;
         $contents[$i] .= "`$match <http://extras.humdrum.org/man/$match>`_";
         $contents[$i] .= $post;
      }

      while ($contents[$i] =~ /:html:htcom:`\s*([^`\s]+)\s*`/) {
         $match = $1;
         $pre = $`;
         $post = $';
         $contents[$i]  = $pre;
         $contents[$i] .= "<a href=http://www.humdrum.org/Humdrum/commands/$match.html>$match</a>";
         $contents[$i] .= $post;
      }

      while ($contents[$i] =~ /:htcom:`\s*([^`\s]+)\s*`/) {
         $match = $1;
         $pre = $`;
         $post = $';
         $contents[$i]  = $pre;
         $contents[$i] .= "`$match <http://www.humdrum.org/Humdrum/commands/$match.html>`_";
         $contents[$i] .= $post;
      }

      while ($contents[$i] =~ /:exinterp:`\s*([^`\s]+)\s*`/) {
         $match = $1;
         $pre = $`;
         $post = $';
         $contents[$i]  = $pre;
         if (-r "$oldhumdir/representations/$match.rep.html") {
            $contents[$i] .= "`\\*\\*$match <http://www.humdrum.org/Humdrum/representations/$match.rep.html>`_";
         } else {
            $contents[$i] .= "\\*\\*$match";
         }
         $contents[$i] .= $post;
      }

   }

   return @contents;
}




sub processHumdrumio {
   my ($line, @contents) = @_;

   my %options;
   $options{"width1"}		= "30%";
   $options{"width2"}		= "30%";
   $options{"width3"} 		= "30%";
   $options{"tablewidth"}	= "100%";
   my $key;
   my $value;

   my $i;
   $i = $line+1;
   while ($contents[$i] =~ /^\s*:([^\s]+):\s*(.*)\s*/) {
      $key = $1;
      $value = $2;
      $contents[$i] = "";
      $options{$key} = $value;
      $i++;
   }

   my $entry;
   
   if ($options{"style"} eq "wide") {

      $entry = <<EOT;
.. raw:: html

	<table width="100%"><tr> <td style="background-color: #cccccc;" colspan="3" align="center">
	   &#x21d2;&nbsp;&nbsp;<tt style="border: none; background-color: #cccccc;">$options{"transform"}</tt>&nbsp;&nbsp;&#x21d2;
	</td></tr><tr><td width="48%>

.. literalinclude:: $options{"inputfile"}
	:language: humdrum

.. raw:: html

	</td><td width="4%">&nbsp;</td><td width="48%">

.. literalinclude:: $options{"outputfile"}
	:language: humdrum

.. raw:: html

	</td></tr></table>
EOT

   } elsif ($options{"style"} eq "outputonly") {

      $entry = <<EOT;
.. raw:: html

	<table width="100%"><tr> <td align="center" style="background-color: #cccccc;" colspan="3">
	   <tt style="border: none; background-color: #cccccc;">$options{"transform"}</tt>
	</td></tr><tr><td colspan="3">

.. literalinclude:: $options{"outputfile"}
	:language: humdrum

.. raw:: html

	</td></tr></table>
EOT

   } else {

      $entry = <<EOT;
.. raw:: html

	<table width="100%"><tr><td width="$options{"width1"}">

.. literalinclude:: $options{"inputfile"}
	:language: humdrum

.. raw:: html

	</td><td align="center" width="$options{"width2"}"> 
	   &#x21d2;&nbsp;<tt>$options{"transform"}</tt>&nbsp;&#x21d2;
	</td><td width="$options{"width3"}">

.. literalinclude:: $options{"outputfile"}
	:language: humdrum

.. raw:: html

	</td></tr></table>
EOT
   }

   # :uxcom: == unix command
   # :hxcom: == humdrum extras command
   # :htcom: == humdrum toolkit command
   $entry =~ s/:([a-z][a-z])com:/:html:${1}com:/g;

   $contents[$line] = $entry;

   return @contents;
}



