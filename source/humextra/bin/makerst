#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Wed Jun 25 01:53:12 PDT 2014
# Last Modified: Wed Jun 25 01:53:12 PDT 2014
# Filename:      ...source/humextra/bin/makerst
# Syntax:        perl 5
#
# Description:   re-restrctured text to restructured text converter.
#


use strict;

my $humtable = "humtable -k";

my $oldhumdir = "../../../Humdrum";

die "Usage $0 input output (@ARGV)" if @ARGV != 2;

my $inputfile  = $ARGV[0];
my $outputfile = $ARGV[1];

open (INFILE, $inputfile) or die "Cannot read inputfile: $inputfile";
my @contents = <INFILE>;
close INFILE;

my %LABELS = getLabels(\@contents);

resolveCounters(\@contents);

@contents = processContents(@contents);

open (OUTFILE, ">$outputfile") or die "Cannot write outputfile: $outputfile";
print OUTFILE ".. ####### AUTOMATICALLY GENERATED TEXT, DO NOT EDIT ######\n";
print OUTFILE @contents;
close OUTFILE;

exit(0);


###########################################################################


##############################
##
## resolveCounters --
##

sub resolveCounters {
   my ($cont) = @_;

   my $i;
   my $pre;
   my $post;
   my $label;
   my $number;
   my $size = @$cont;
   for ($i=0; $i<$size; $i++) {
      while ($$cont[$i] =~ /:counter:`([^`]+)`/) {
         $pre    = $`;
         $post   = $';
         $label  = $1;
         $number = $LABELS{"$label"};
         if ($number =~ /^\s*$/) {
	    print "Error: Label \"$label\" is not defined.\n";
            $number = "XXXXX";
         }
         $$cont[$i] = "$pre$number$post";
      }
   }
}



##############################
##
## getLabels --
##

sub getLabels {
   my ($cont) = @_;
   my %output;

   my %counts;

   my $pre;
   my $post;
   my $category;
   my $label;
   my $line;
   my $i;
   my $number;
   my $size = @$cont;

   for ($i=0; $i<$size; $i++) {
      while ($$cont[$i] =~ /:label:([A-Za-z0-9_-]+):`([^`]+)`/) {
         $pre  = $`;
         $post = $';
         $category = $1;
         $label    = $2;
         $counts{$category}++;
         $number = $counts{$category};
         if ($output{$label} !~ /^\s*$/) {
            die "Error: label already exists: \"$label\"\n";
         } else {
            print "Creating label \"$label\" with counter = $number\n";
         }
         $output{$label} = $number;
         $$cont[$i] = "$pre$number$post";
      }
   }

   return %output;
}





##############################
##
## processContents --
##
## * Add hyperlinks to Humdrum Extras program man pages:
## Change :hxcom:`command`
## To:    `command <http://extras.humdrum.org/man/command>`_
##
## * Add hyperlinks to Humdrum Toolkit program man pages:
## Change :htcom:`command`
## To:    `command <http://www.humdrum.org/Humdrum/commands/command.html>`_
##
## * Tagging system for exclusive interpretations:
## Change :exinterp:`kern`
## To:    \*\*kern
##
##

sub processContents {
   my @contents = @_;

   my $i;
   my $pre;
   my $post;
   my $match;
   for ($i=0; $i<@contents; $i++) {

      if ($contents[$i] =~ /^\.\.\s+humdrumio\s*:\s*:/) {
         @contents = processHumdrumio($i, @contents);
      }

      while ($contents[$i] =~ /:html:hxcom:`\s*([^`\s]+)\s*`/) {
         $match = $1;
         $pre = $`;
         $post = $';
         $contents[$i]  = $pre;
         $contents[$i] .= "<a href=http://extras.humdrum.org/man/$match>$match</a>";
         $contents[$i] .= $post;
      }

      while ($contents[$i] =~ /:hxcom:`\s*([^`\s]+)\s*`/) {
         $match = $1;
         $pre = $`;
         $post = $';
         $contents[$i]  = $pre;
         $contents[$i] .= "`$match <http://extras.humdrum.org/man/$match>`_";
         $contents[$i] .= $post;
      }

      while ($contents[$i] =~ /:html:htcom:`\s*([^`\s]+)\s*`/) {
         $match = $1;
         $pre = $`;
         $post = $';
         $contents[$i]  = $pre;
         $contents[$i] .= "<a href=http://www.humdrum.org/Humdrum/commands/$match.html>$match</a>";
         $contents[$i] .= $post;
      }

      while ($contents[$i] =~ /:htcom:`\s*([^`\s]+)\s*`/) {
         $match = $1;
         $pre = $`;
         $post = $';
         $contents[$i]  = $pre;
         $contents[$i] .= "`$match <http://www.humdrum.org/Humdrum/commands/$match.html>`_";
         $contents[$i] .= $post;
      }

      while ($contents[$i] =~ /:exinterp:`\s*([^`\s]+)\s*`/) {
         $match = $1;
         $pre = $`;
         $post = $';
         $contents[$i]  = $pre;
         if (-r "$oldhumdir/representations/$match.rep.html") {
            $contents[$i] .= "`\\*\\*$match <http://www.humdrum.org/Humdrum/representations/$match.rep.html>`_";
         } else {
            $contents[$i] .= "\\*\\*$match";
         }
         $contents[$i] .= $post;
      }

   }

   return @contents;
}



##############################
##
## processHumdrumio --
##

sub processHumdrumio {
   my ($line, @contents) = @_;

   my %options;
   $options{"width1"}		= "30%";
   $options{"width2"}		= "30%";
   $options{"width3"} 		= "30%";
   $options{"tablewidth"}	= "100%";
   my $key;
   my $value;

   my $i;
   $i = $line+1;
   while ($contents[$i] =~ /^\s*:([^\s]+):\s*(.*)\s*/) {
      $key = $1;
      $value = $2;
      $contents[$i] = "";
      $key =~ s/-//g;
      $key =~ s/_//g;
      $options{$key} = $value;
      $i++;
   }

   my $outputtabwidth = $options{'outputtabwidth'};
   if ($outputtabwidth !~ /^\s*$/) {
      $outputtabwidth = "\t:tab-width: $outputtabwidth\n";
   }

   my $inputtabwidth = $options{'inputtabwidth'};
   if ($inputtabwidth !~ /^\s*$/) {
      $inputtabwidth = "\t:tab-width: $inputtabwidth\n";
   }
   $options{'inputtabwidth'};


   if ($options{"display"} eq "humtable") {
      my $which = `which $humtable`;
      if ($which =~ /^\s*$/) {
         $options{"display"} = "literalinclude";
      }
   }

   if ($options{"display"} eq "humtable") {
      printHumdrumioAsHumtable($line, \%options, \@contents);
   } else {
      printHumdrumioAsLiteralInclude($line, \%options, \@contents);
   }

   return @contents;
}



##############################
##
## printHumdrumAsLiteralInclude --
##

sub printHumdrumioAsLiteralInclude {
   my ($line, $opt, $cont) = @_;

   my $inputfile      = $opt->{"inputfile"};
   my $outputfile     = $opt->{"outputfile"};
   my $transform      = $opt->{"transform"};
   my $style          = $opt->{"style"};
   my $width1         = $opt->{"width1"};
   my $width2         = $opt->{"width2"};
   my $width3         = $opt->{"width3"};
   my $inputtabwidth  = $opt->{"inputtabwidth"};
   my $outputtabwidth = $opt->{"outputtabwidth"};

   my $entry;
   
   if ($style eq "wide") {

      $entry = <<EOT;
.. raw:: html

	<table width="100%"><tr> <td style="background-color: #cccccc;" colspan="3" align="center">
	   &#x21d2;&nbsp;&nbsp;<tt style="border: none; background-color: #cccccc;">$transform</tt>&nbsp;&nbsp;&#x21d2;
	</td></tr><tr><td width="48%>

.. literalinclude:: $inputfile
	:language: humdrum
$inputtabwidth

.. raw:: html

	</td><td width="4%">&nbsp;</td><td width="48%">

.. literalinclude:: $outputfile
	:language: humdrum
$outputtabwidth

.. raw:: html

	</td></tr></table>
EOT

   } elsif ($style eq "outputonly") {

      $entry = <<EOT;
.. raw:: html

	<table width="100%"><tr> <td align="center" style="background-color: #cccccc;" colspan="3">
	   <tt style="border: none; background-color: #cccccc;">$transform</tt>
	</td></tr><tr><td colspan="3">

.. literalinclude:: $outputfile
	:language: humdrum
$outputtabwidth

.. raw:: html

	</td></tr></table>
EOT

   } else {

      $entry = <<EOT;
.. raw:: html

	<table width="100%"><tr><td width="$width1">

.. literalinclude:: $inputfile
	:language: humdrum
$inputtabwidth

.. raw:: html

	</td><td align="center" width="$width2"> 
	   &#x21d2;&nbsp;<tt>$transform</tt>&nbsp;&#x21d2;
	</td><td width="$width3">

.. literalinclude:: $outputfile
	:language: humdrum
$outputtabwidth

.. raw:: html

	</td></tr></table>
EOT
   }

   # :uxcom: == unix command
   # :hxcom: == humdrum extras command
   # :htcom: == humdrum toolkit command
   $entry =~ s/:([a-z][a-z])com:/:html:${1}com:/g;

   $$cont[$line] = $entry;

}



##############################
##
## printHumdrumAsHumtable --
##
##
## Single file in humtable display:
##
##.. humdrumio::
##	:file:		file.krn
##	:style:		fileonly
##	:display:	humtable
##

sub printHumdrumioAsHumtable {
   my ($line, $opt, $cont) = @_;

   my $inputfile      = $opt->{"inputfile"};
   my $outputfile     = $opt->{"outputfile"};
   my $transform      = $opt->{"transform"};
   my $style          = $opt->{"style"};
   my $width1         = $opt->{"width1"};
   my $width2         = $opt->{"width2"};
   my $width3         = $opt->{"width3"};
   my $inputtabwidth  = $opt->{"inputtabwidth"};
   my $outputtabwidth = $opt->{"outputtabwidth"};

   if ($style eq "fileonly") {
      $outputfile = $opt->{"file"}
   }

   my $entry;

   my $inhtml;
   my $outhtml;

   my $shortin = $inputfile;
   my $shortout = $outputfile;
   $shortin  =~ s/.*\///;
   $shortout =~ s/.*\///;

   if (validHumdrum($shortin)) {
      $inhtml = `humtable $shortin`;
   } else {
      $inhtml = "$shortin NOT FOUND";
   }
   if (validHumdrum($shortout)) {
      $outhtml = `humtable $shortout`;
   } else {
      $outhtml = "$shortout NOT FOUND";
   }
   
   $inhtml =~ s/^/\t/gm;
   $outhtml =~ s/^/\t/gm;

   if ($style eq "wide") {

      $entry = <<EOT;
.. raw:: html

	<table width="100%"><tr> <td style="background-color: #cccccc;" colspan="3" align="center">
	   &#x21d2;&nbsp;&nbsp;<tt style="border: none; background-color: #cccccc;">$transform</tt>&nbsp;&nbsp;&#x21d2;
	</td></tr><tr><td width="48%>
$inhtml
	</td><td width="4%">&nbsp;</td><td width="48%">
$outhtml
	</td></tr></table>
EOT

   } elsif ($style eq "outputonly") {

      $entry = <<EOT;
.. raw:: html

	<table width="100%"><tr> <td align="center" style="background-color: #cccccc;" colspan="3">
	   <tt style="border: none; background-color: #cccccc;">$transform</tt>
	</td></tr><tr><td colspan="3">
$outhtml
	</td></tr></table>
EOT

   } elsif ($style eq "fileonly") {

      $entry = <<EOT;
.. raw:: html

	<table width="100%">
	<tr><td colspan="3">
$outhtml
	</td></tr></table>
EOT

   } else {

      $entry = <<EOT;
.. raw:: html

	<table width="100%"><tr><td width="$width1">
$inhtml
	</td><td align="center" width="$width2"> 
	   &#x21d2;&nbsp;<tt>$transform</tt>&nbsp;&#x21d2;
	</td><td width="$width3">
$outhtml
	</td></tr></table>
EOT
   }

   # :uxcom: == unix command
   # :hxcom: == humdrum extras command
   # :htcom: == humdrum toolkit command
   $entry =~ s/:([a-z][a-z])com:/:html:${1}com:/g;

   $$cont[$line] = $entry;

}



#############################
##
## validHumdrum -- returns true if valid Humdrum file.
##

sub validHumdrum {
   my ($filename) = @_;

   return 0 if !-r $filename;

   open(VFILE, $filename) or die;
   my $line;
   while ($line = <VFILE>) {
      next if $line =~ /^$/;
      if ($line =~ /^!/) {
         close VFILE;
         return 1;
      }
      if ($line =~ /^\*/) {
         close VFILE;
         return 1;
      }
      close VFILE;
      return 0;
   }
}



